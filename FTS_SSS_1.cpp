//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\Administrator\Desktop\UG\FTS_SSS_1.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: YangShengyuan
//              Version: NX 10
//              Date: 11-15-2019  (Format: mm-dd-yyyy)
//              Time: 09:40 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "FTS_SSS_1.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(FTS_SSS_1::theSession) = NULL;
UI *(FTS_SSS_1::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
FTS_SSS_1::FTS_SSS_1()
{
    try
    {
        // Initialize the NX Open C++ API environment
        FTS_SSS_1::theSession = NXOpen::Session::GetSession();
        FTS_SSS_1::theUI = UI::GetUI();
        theDlxFileName = "FTS_SSS_1.dlx";
        theDialog = FTS_SSS_1::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &FTS_SSS_1::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &FTS_SSS_1::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &FTS_SSS_1::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &FTS_SSS_1::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &FTS_SSS_1::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
FTS_SSS_1::~FTS_SSS_1()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file 
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        2) Invoke the Shared Library through File->Execute->NX Open menu.
//
//------------------------------------------------------------------------------
extern "C" DllExport void  ufusr(char *param, int *retcod, int param_len)
{
    FTS_SSS_1 *theFTS_SSS_1 = NULL;
    try
    {
        theFTS_SSS_1 = new FTS_SSS_1();
        // The following method shows the dialog immediately
        theFTS_SSS_1->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        FTS_SSS_1::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    if(theFTS_SSS_1 != NULL)
    {
        delete theFTS_SSS_1;
        theFTS_SSS_1 = NULL;
    }
}

//------------------------------------------------------------------------------
// This method specifies how a shared image is unloaded from memory
// within NX. This method gives you the capability to unload an
// internal NX Open application or user  exit from NX. Specify any
// one of the three constants as a return value to determine the type
// of unload to perform:
//
//
//    Immediately : unload the library as soon as the automation program has completed
//    Explicitly  : unload the library from the "Unload Shared Image" dialog
//    AtTermination : unload the library when the NX session terminates
//
//
// NOTE:  A program which associates NX Open applications with the menubar
// MUST NOT use this option since it will UNLOAD your NX Open application image
// from the menubar.
//------------------------------------------------------------------------------
extern "C" DllExport int ufusr_ask_unload()
{
    //return (int)Session::LibraryUnloadOptionExplicitly;
    return (int)Session::LibraryUnloadOptionImmediately;
    //return (int)Session::LibraryUnloadOptionAtTermination;
}

//------------------------------------------------------------------------------
// Following method cleanup any housekeeping chores that may be needed.
// This method is automatically called by NX.
//------------------------------------------------------------------------------
extern "C" DllExport void ufusr_cleanup(void)
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        FTS_SSS_1::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

int FTS_SSS_1::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        FTS_SSS_1::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void FTS_SSS_1::initialize_cb()
{
    try
    {
        group0 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group0"));
        start_radius0 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("start_radius0"));
        angle_space0 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("angle_space0"));
        tool_radius0 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("tool_radius0"));
        feed_rate0 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("feed_rate0"));
        rare_angle0 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("rare_angle0"));
        FolderBrowser0 = dynamic_cast<NXOpen::BlockStyler::FolderSelection*>(theDialog->TopBlock()->FindBlock("FolderBrowser0"));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        FTS_SSS_1::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void FTS_SSS_1::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        FTS_SSS_1::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int FTS_SSS_1::apply_cb()
{
    int errorCode = 0;
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        FTS_SSS_1::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int FTS_SSS_1::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    try
    {
        if(block == start_radius0)
        {
        //---------Enter your code here-----------
        }
        else if(block == angle_space0)
        {
        //---------Enter your code here-----------
        }
        else if(block == tool_radius0)
        {
        //---------Enter your code here-----------
        }
        else if(block == feed_rate0)
        {
        //---------Enter your code here-----------
        }
        else if(block == rare_angle0)
        {
        //---------Enter your code here-----------
        }
        else if(block == FolderBrowser0)
        {
        //---------Enter your code here-----------
        }
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        FTS_SSS_1::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int FTS_SSS_1::ok_cb()
{
	ofstream File;
	ofstream Uncom_File;
    double max = 0;
	int count = 0;
    int errorCode = 0;
	double arc_distant = 0;
	double pre_high = 0;
	double rare_space = (angle_space0->Value() / 20) * (pi/180);
	double max_tan = 0 ;
	double temp_tan = 0;
	rare_angle = rare_angle0->Value()*(pi/180);
	double rare_tan = tan(rare_angle);
	double Tool_Com[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
	double arr_init[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
	double transform[16] = {1,0,0,0,
							0,1,0,0,
							0,0,1,0,
							0,0,0,1};
		start_radius = start_radius0->Value();
		angle_space = angle_space0->Value()*(pi/180);
		tool_radius = tool_radius0->Value();
		feed_rate = feed_rate0->Value();
		rare_angle = rare_angle0->Value()*(pi/180);
		strcpy(msg,FolderBrowser0->Path().GetLocaleText());
		if(strlen(msg) == 0){
			uc1601("数据保存文件夹未选择，请选择数保存文件夹",1);
			return 1;
		}
		if(feed_rate != 0){
			strcpy(File_dir,FolderBrowser0->Path().GetLocaleText());
			sprintf(File_name,"angle_%.2f_radius_%.2f_feed_%.1f_.txt",angle_space0->Value(),start_radius,feed_rate);
			strcat(File_dir,File_name);
			File.open(File_dir);
			sprintf(msg,"正在获取表面信息文件\n文件保存为：%s",File_dir);
			uc1601(msg,1);
		}else{
			strcpy(File_dir,FolderBrowser0->Path().GetLocaleText());
			sprintf(File_name,"feed_rate_test_%.2f.txt",start_radius);
			strcat(File_dir,File_name);
			File.open(File_dir);
			sprintf(msg,"正在获取进给率测试文件\n文件保存为：%s",File_dir);
			uc1601(msg,1);
		}
		UF_initialize();
		tag_t PartTag = NULL_TAG;
		tag_t FeatureTag = NULL_TAG;
		UF_MODL_ask_current_feature(UF_PART_ask_display_part(),&PartTag);
		UF_MODL_ask_feat_body(PartTag,DisplayBodyTag);
		cir_count = (1000 * start_radius / feed_rate);
		angle = cir_count * 2 * pi;
		angle_max = angle;
		count = 0;
		if(feed_rate != 0){
			while(angle > 0){
				max = 0;
				point_origin[0] = (start_radius / angle_max) * angle * sin(angle) ;
				point_origin[1] = (start_radius / angle_max) * angle * cos(angle) ;
				UF_MODL_trace_a_ray(1,DisplayBodyTag,point_origin,ray_direction,transform,1,&num_results,&hit_list_p);
				if (num_results != 1){
					sprintf(msg,"在X:%f Y:%f处没有找到投影点，请注意初始半径是否超出工件",point_origin[0],point_origin[1]);
					uc1601(msg,1);
					return 1;
				}
				zpt = hit_list_p[0].hit_point[2];
				for(int i = 1;i<=12;i = i + 1){
						r_temp = ((start_radius / angle_max) * angle + tool_radius * cos((88.8 + 0.2 * i) * (pi / 180)));
						point_origin[0] = r_temp * sin(angle);
						point_origin[1] = r_temp * cos(angle);
						UF_MODL_trace_a_ray(1, DisplayBodyTag, point_origin, ray_direction, transform, 1, &num_results, &hit_list_p);
						z_tool = zpt + tool_radius * (1 - sin(i * pi / 10));
						if (num_results == 1) {
							z_temp = hit_list_p[0].hit_point[2];
						}
						else
						{
							z_temp = 0;
						}
						max = z_temp - z_tool;
						Tool_Com[i - 1] = max;
				}
				max = *max_element(Tool_Com,Tool_Com + 12);
				File<<(zpt + max)/1000<<endl;
				count ++;
				for(int j = 1;j<=20;j = j + 1){
					arc_distant = j * rare_space * (start_radius / angle_max) * angle;
					point_origin[0] = (start_radius / angle_max) * (angle + rare_space * j) * sin(angle + rare_space * j) ;
					point_origin[1] = (start_radius / angle_max) * (angle + rare_space * j) * cos(angle + rare_space * j) ;
					UF_MODL_trace_a_ray(1, DisplayBodyTag, point_origin, ray_direction, transform, 1, &num_results, &hit_list_p);
					if (num_results == 1) {
						pre_high = hit_list_p[0].hit_point[2];
					}
					else
					{
						pre_high = 0;
					}
					temp_tan = (pre_high - zpt) /arc_distant;
					if (temp_tan > max_tan){
						max_tan = temp_tan;
					}
				}
				angle = angle - angle_space;
			}
			File.close();
			if(max_tan > rare_tan){
				sprintf(msg,"信息获取完成，后角发生干涉，允许的最小后角为%f°",atan(max_tan)/(pi/180));
				uc1601(msg,1);
			}else{
				sprintf(msg,"信息获取完成，后角没有发生干涉，允许的最小后角为%f°",atan(max_tan)/(pi/180));
				uc1601(msg,1);
			}
		}
		else
		{
			count = 0;
			for(double current_radius = start_radius;current_radius > 0.001;current_radius -= 0.001){//默认1um取一个环
				for(double current_angle = 2 * pi;current_angle > 0;current_angle -= 2*(pi/180)){//默认2度取一个环
					point_origin[0] = current_radius * sin(current_angle);
					point_origin[1] = current_radius * cos(current_angle);
					UF_MODL_trace_a_ray(1,DisplayBodyTag,point_origin,ray_direction,transform,1,&num_results,&hit_list_p);
					if (num_results != 1){
						sprintf(msg,"在X:%f Y:%f处没有找到投影点，请注意初始半径是否超出工件",point_origin[0],point_origin[1]);
						uc1601(msg,1);
					return 0;
					}
					zpt = hit_list_p[0].hit_point[2];
					File<<zpt/1000<<"  ";
				}
				File<<endl;
			}
			File.close();
			uc1601("成功获取了进给率测试文件",1);
		}

    return 1;
}

//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* FTS_SSS_1::GetBlockProperties(const char *blockID)
{
    return theDialog->GetBlockProperties(blockID);
}
